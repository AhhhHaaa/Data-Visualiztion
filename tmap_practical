
# 1.Exploring time-series data ----------------------------------------------
#prerequisite packages
library(tidyverse)
library(lubridate) 
library(nycflights13)

#add a new column at the right 
flightEdited <- flights %>% 
  mutate(date = make_date(year, month, day))
#select the date column
flightEdited %>% 
  select(year, month, day, date) %>% 
  head

#group the date to count the occurence(flights / per day)
daily <- flightEdited %>% 
  group_by(date) %>% 
  summarise(n = n())

#plot the frequency of flights
ggplot(daily, aes(date, n)) + geom_line()

#Show the weekdays and month for the date
updateFlightsEdited <- flightEdited %>% 
  mutate(weekday = wday(date, label = TRUE)) %>% 
  mutate(month = month(date, label = TRUE))

# 1.1exercise ----------------------------------------------------------------
#filter Janunary
Jan <- flightEdited %>% 
  filter(month == "1") %>% 
  group_by(date) %>% 
  summarise(number.flights = n())
#plot the flight in January
ggplot(Jan, aes(date, number.flights)) + geom_line()

# #1.2 exercise to find the most flights by weekday and month -------------
 mostFlights <- flightEdited %>% select(day, month, date) %>% 
  group_by(date,month) %>% 
  summarise(count = n()) %>% 
  group_by(month) %>%
     summarise(sum = sum(count)) %>% 
     filter(sum == max(sum))

# 2.Creating a correlation matrix -------------------------------------------
data(mtcars)
str(mtcars)
#apply cor() can find the relationship between each pair
mcor <- cor(mtcars)
round(mcor, digits = 2) #adjust the digits 

# 2.1 corrplot package ----------------------------------------------------

install.packages("corrplot")
library(corrplot)
corrplot(mcor)
#ggcoor() from GGally
install.packages("GGally")
library(GGally)
ggcorr(mtcars) + 
  labs(title = "plot by ggcorr in GGally package")

# 3.Create the Heatmap ------------------------------------------------------
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv", sep=",")

#rename the index for the rows of the data (add rownames.)
row.names(nba) <- nba$Name
#remove the first column containing the names
nba <- nba[, 2:20]
#since heatmap requires Matrix
nbaMatrix <- data.matrix(nba)
nba_heatmap <- heatmap(nbaMatrix, Rowv = NA, Colv = NA, 
        col = heat.colors(256), scale = "column", margins = c(5,5))

#4.network by ggplot2: igraph package --------------------------------------
install.packages("igraph")
library(igraph)

gDirected <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6 ))
#gDirected can show the relationships in text format as following
  #IGRAPH 1edb7ca D--- 6 6 -- 
  #+ edges from 1edb7ca:
  #[1] 1->2 2->3 2->4 1->4 5->5 3->6

#add paramete "directed = FALSE" to create the undirected grpah
gUndirected <- graph(c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6 ), directed = FALSE)

#load the media data
nodes <- read.csv("Dataset1-Media-Example-NODES.csv", header = T, as.is = T)
head(nodes)
links <- read.csv("Dataset1-Media-Example-EDGES.csv", header = T, as.is = T)

#  graph_from_data_frame() ------------------------------------------------
#plot the network graph usin"
net <- graph_from_data_frame(d = links, vertices = nodes, directed = T)

# add the colour in plot

plot(net, edge.arrow.size = .4, 
     vertex.label = V(net)$media, vertex.color = V(net)$media.type)


#5. Spatial data visualisation ----------------------------------------------

#6. Creating thematic maps with tmap One --------------------------------
#map based on the "ploygons"
#coloured by the variable: population, counties in the UK

install.packages("tmap")
library(tmap)
library(rgdal)

#it requires to load the boundary data(shapefile) 
install.packages("rgdal") #using for read the shapefile

#loading the shapefile
sheffieldShape <- readOGR(dsn = "./BoundaryData",
                          layer = "england_lsoa_2011")
#using different way to load shape file
install.packages("sf")
library(sf)
library(tmap)
sheffieldShape.sf <- readOGR(dsn = "./BoundaryData", package = "sf",
                             layer = "england_lsoa_2011" )
#quuck thematic map or qtm()from tmap package

qtm(sheffieldShape)

#using tmap_mode() create the intercative
#tmap mode set to interactive viewing
tmap_mode("view")

#this kind of map can allow to zoom in / out
# and can change the layout 

qtm(sheffieldShape)

#elimate the grey section
#fill = NULL
qtm(sheffieldShape, fill = NULL) 

#turn off the interactive mode
tmap_mode("plot")
library(tidyverse)
